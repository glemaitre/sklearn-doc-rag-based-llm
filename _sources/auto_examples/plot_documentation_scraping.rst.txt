
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_documentation_scraping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_documentation_scraping.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_documentation_scraping.py:


=================================
Documentation scraping strategies
=================================

This example illustrates how the different documentation scraping strategies work
in `ragger_duck`.

.. GENERATED FROM PYTHON SOURCE LINES 11-22

API documentation scraping
--------------------------
First, we look at the :class:`~ragger_duck.scraping.APINumPyDocExtractor` class. This
class is used to scrape the API documentation of scikit-learn. It leverages the
`numpydoc` scraper and create semi-structured chunk of text.

Let's show an example where we scrape the documentation of
:class:`~sklearn.ensemble.RandomForestClassifier`. Our scrapper requires the HTML
generated file to infer if this is part of the public API. To do so,s we copied the
HTML generated file in the folder `toy_documentation/api`. We can therefore process
this folder.

.. GENERATED FROM PYTHON SOURCE LINES 22-29

.. code-block:: Python

    from pathlib import Path

    from ragger_duck.scraping import APINumPyDocExtractor

    path_api_doc = Path(".") / "toy_documentation" / "api"
    chunks = APINumPyDocExtractor().fit_transform(path_api_doc)








.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: Python

    for chunk in chunks:
        print(f"The source of the chunk is {chunk['source']}\n")
        print(f"{chunk['text']}\n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier
    The parameters of RandomForestClassifier with their default values when known are: n_estimators (default=100), criterion (default=gini), max_depth (default=None), min_samples_split (default=2), min_samples_leaf (default=1), min_weight_fraction_leaf (default=0.0), max_features (default=sqrt), max_leaf_nodes (default=None), min_impurity_decrease (default=0.0), bootstrap (default=True), oob_score (default=False), n_jobs (default=None), random_state (default=None), verbose (default=0), warm_start (default=False), class_weight (default=None), ccp_alpha (default=0.0), max_samples (default=None), monotonic_cst (default=None).
    The description of the RandomForestClassifier is as follow.
    A random forest classifier.
    A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. Trees in the forest use the best split strategy, i.e. equivalent to passing `splitter="best"` to the underlying :class:`~sklearn.tree.DecisionTreeRegressor`. The sub-sample size is controlled with the `max_samples` parameter if `bootstrap=True` (default), otherwise the whole dataset is used to build each tree.
    For a comparison between tree-based ensemble models see the example :ref:`sphx_glr_auto_examples_ensemble_plot_forest_hist_grad_boosting_comparison.py`.
    Read more in the :ref:`User Guide <forest>`.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter n_estimators of sklearn.ensemble.RandomForestClassifier.
    n_estimators is described as 'The number of trees in the forest.

    .. versionchanged:: 0.22
       The default value of ``n_estimators`` changed from 10 to 100
       in 0.22.' and has the following type(s): int, default=100

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter criterion of sklearn.ensemble.RandomForestClassifier.
    criterion is described as 'The function to measure the quality of a split. Supported criteria are
    "gini" for the Gini impurity and "log_loss" and "entropy" both for the
    Shannon information gain, see :ref:`tree_mathematical_formulation`.
    Note: This parameter is tree-specific.' and has the following type(s): {"gini", "entropy", "log_loss"}, default="gini"

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter max_depth of sklearn.ensemble.RandomForestClassifier.
    max_depth is described as 'The maximum depth of the tree. If None, then nodes are expanded until
    all leaves are pure or until all leaves contain less than
    min_samples_split samples.' and has the following type(s): int, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter min_samples_split of sklearn.ensemble.RandomForestClassifier.
    min_samples_split is described as 'The minimum number of samples required to split an internal node:

    - If int, then consider `min_samples_split` as the minimum number.
    - If float, then `min_samples_split` is a fraction and
      `ceil(min_samples_split * n_samples)` are the minimum
      number of samples for each split.

    .. versionchanged:: 0.18
       Added float values for fractions.' and has the following type(s): int or float, default=2

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter min_samples_leaf of sklearn.ensemble.RandomForestClassifier.
    min_samples_leaf is described as 'The minimum number of samples required to be at a leaf node.
    A split point at any depth will only be considered if it leaves at
    least ``min_samples_leaf`` training samples in each of the left and
    right branches.  This may have the effect of smoothing the model,
    especially in regression.

    - If int, then consider `min_samples_leaf` as the minimum number.
    - If float, then `min_samples_leaf` is a fraction and
      `ceil(min_samples_leaf * n_samples)` are the minimum
      number of samples for each node.

    .. versionchanged:: 0.18
       Added float values for fractions.' and has the following type(s): int or float, default=1

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter min_weight_fraction_leaf of sklearn.ensemble.RandomForestClassifier.
    min_weight_fraction_leaf is described as 'The minimum weighted fraction of the sum total of weights (of all
    the input samples) required to be at a leaf node. Samples have
    equal weight when sample_weight is not provided.' and has the following type(s): float, default=0.0

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter max_features of sklearn.ensemble.RandomForestClassifier.
    max_features is described as 'The number of features to consider when looking for the best split:

    - If int, then consider `max_features` features at each split.
    - If float, then `max_features` is a fraction and
      `max(1, int(max_features * n_features_in_))` features are considered at each
      split.
    - If "sqrt", then `max_features=sqrt(n_features)`.
    - If "log2", then `max_features=log2(n_features)`.
    - If None, then `max_features=n_features`.

    .. versionchanged:: 1.1
        The default of `max_features` changed from `"auto"` to `"sqrt"`.

    Note: the search for a split does not stop until at least one
    valid partition of the node samples is found, even if it requires to
    effectively inspect more than ``max_features`` features.' and has the following type(s): {"sqrt", "log2", None}, int or float, default="sqrt"

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter max_leaf_nodes of sklearn.ensemble.RandomForestClassifier.
    max_leaf_nodes is described as 'Grow trees with ``max_leaf_nodes`` in best-first fashion.
    Best nodes are defined as relative reduction in impurity.
    If None then unlimited number of leaf nodes.' and has the following type(s): int, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter min_impurity_decrease of sklearn.ensemble.RandomForestClassifier.
    min_impurity_decrease is described as 'A node will be split if this split induces a decrease of the impurity
    greater than or equal to this value.

    The weighted impurity decrease equation is the following::

        N_t / N * (impurity - N_t_R / N_t * right_impurity
                            - N_t_L / N_t * left_impurity)

    where ``N`` is the total number of samples, ``N_t`` is the number of
    samples at the current node, ``N_t_L`` is the number of samples in the
    left child, and ``N_t_R`` is the number of samples in the right child.

    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,
    if ``sample_weight`` is passed.

    .. versionadded:: 0.19' and has the following type(s): float, default=0.0

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter bootstrap of sklearn.ensemble.RandomForestClassifier.
    bootstrap is described as 'Whether bootstrap samples are used when building trees. If False, the
    whole dataset is used to build each tree.' and has the following type(s): bool, default=True

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter oob_score of sklearn.ensemble.RandomForestClassifier.
    oob_score is described as 'Whether to use out-of-bag samples to estimate the generalization score.
    By default, :func:`~sklearn.metrics.accuracy_score` is used.
    Provide a callable with signature `metric(y_true, y_pred)` to use a
    custom metric. Only available if `bootstrap=True`.' and has the following type(s): bool or callable, default=False

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter n_jobs of sklearn.ensemble.RandomForestClassifier.
    n_jobs is described as 'The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,
    :meth:`decision_path` and :meth:`apply` are all parallelized over the
    trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`
    context. ``-1`` means using all processors. See :term:`Glossary
    <n_jobs>` for more details.' and has the following type(s): int, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter random_state of sklearn.ensemble.RandomForestClassifier.
    random_state is described as 'Controls both the randomness of the bootstrapping of the samples used
    when building trees (if ``bootstrap=True``) and the sampling of the
    features to consider when looking for the best split at each node
    (if ``max_features < n_features``).
    See :term:`Glossary <random_state>` for details.' and has the following type(s): int, RandomState instance or None, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter verbose of sklearn.ensemble.RandomForestClassifier.
    verbose is described as 'Controls the verbosity when fitting and predicting.' and has the following type(s): int, default=0

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter warm_start of sklearn.ensemble.RandomForestClassifier.
    warm_start is described as 'When set to ``True``, reuse the solution of the previous call to fit
    and add more estimators to the ensemble, otherwise, just fit a whole
    new forest. See :term:`Glossary <warm_start>` and
    :ref:`tree_ensemble_warm_start` for details.' and has the following type(s): bool, default=False

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter class_weight of sklearn.ensemble.RandomForestClassifier.
    class_weight is described as 'Weights associated with classes in the form ``{class_label: weight}``.
    If not given, all classes are supposed to have weight one. For
    multi-output problems, a list of dicts can be provided in the same
    order as the columns of y.

    Note that for multioutput (including multilabel) weights should be
    defined for each class of every column in its own dict. For example,
    for four-class multilabel classification weights should be
    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of
    [{1:1}, {2:5}, {3:1}, {4:1}].

    The "balanced" mode uses the values of y to automatically adjust
    weights inversely proportional to class frequencies in the input data
    as ``n_samples / (n_classes * np.bincount(y))``

    The "balanced_subsample" mode is the same as "balanced" except that
    weights are computed based on the bootstrap sample for every tree
    grown.

    For multi-output, the weights of each column of y will be multiplied.

    Note that these weights will be multiplied with sample_weight (passed
    through the fit method) if sample_weight is specified.' and has the following type(s): {"balanced", "balanced_subsample"}, dict or list of dicts, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter ccp_alpha of sklearn.ensemble.RandomForestClassifier.
    ccp_alpha is described as 'Complexity parameter used for Minimal Cost-Complexity Pruning. The
    subtree with the largest cost complexity that is smaller than
    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See
    :ref:`minimal_cost_complexity_pruning` for details.

    .. versionadded:: 0.22' and has the following type(s): non-negative float, default=0.0

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter max_samples of sklearn.ensemble.RandomForestClassifier.
    max_samples is described as 'If bootstrap is True, the number of samples to draw from X
    to train each base estimator.

    - If None (default), then draw `X.shape[0]` samples.
    - If int, then draw `max_samples` samples.
    - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,
      `max_samples` should be in the interval `(0.0, 1.0]`.

    .. versionadded:: 0.22' and has the following type(s): int or float, default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter monotonic_cst of sklearn.ensemble.RandomForestClassifier.
    monotonic_cst is described as 'Indicates the monotonicity constraint to enforce on each feature.
      - 1: monotonic increase
      - 0: no constraint
      - -1: monotonic decrease

    If monotonic_cst is None, no constraints are applied.

    Monotonicity constraints are not supported for:
      - multiclass classifications (i.e. when `n_classes > 2`),
      - multioutput classifications (i.e. when `n_outputs_ > 1`),
      - classifications trained on data with missing values.

    The constraints hold over the probability of the positive class.

    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.

    .. versionadded:: 1.4' and has the following type(s): array-like of int of shape (n_features), default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute estimator_ of sklearn.ensemble.RandomForestClassifier.
    estimator_ is described as 'The child estimator template used to create the collection of fitted
    sub-estimators.

    .. versionadded:: 1.2
       `base_estimator_` was renamed to `estimator_`.' and has the following type(s): :class:`~sklearn.tree.DecisionTreeClassifier`

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute estimators_ of sklearn.ensemble.RandomForestClassifier.
    estimators_ is described as 'The collection of fitted sub-estimators.' and has the following type(s): list of DecisionTreeClassifier

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute classes_ of sklearn.ensemble.RandomForestClassifier.
    classes_ is described as 'The classes labels (single output problem), or a list of arrays of
    class labels (multi-output problem).' and has the following type(s): ndarray of shape (n_classes,) or a list of such arrays

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute n_classes_ of sklearn.ensemble.RandomForestClassifier.
    n_classes_ is described as 'The number of classes (single output problem), or a list containing the
    number of classes for each output (multi-output problem).' and has the following type(s): int or list

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute n_features_in_ of sklearn.ensemble.RandomForestClassifier.
    n_features_in_ is described as 'Number of features seen during :term:`fit`.

    .. versionadded:: 0.24' and has the following type(s): int

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute feature_names_in_ of sklearn.ensemble.RandomForestClassifier.
    feature_names_in_ is described as 'Names of features seen during :term:`fit`. Defined only when `X`
    has feature names that are all strings.

    .. versionadded:: 1.0' and has the following type(s): ndarray of shape (`n_features_in_`,)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute n_outputs_ of sklearn.ensemble.RandomForestClassifier.
    n_outputs_ is described as 'The number of outputs when ``fit`` is performed.' and has the following type(s): int

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute feature_importances_ of sklearn.ensemble.RandomForestClassifier.
    feature_importances_ is described as 'The impurity-based feature importances.
    The higher, the more important the feature.
    The importance of a feature is computed as the (normalized)
    total reduction of the criterion brought by that feature.  It is also
    known as the Gini importance.

    Warning: impurity-based feature importances can be misleading for
    high cardinality features (many unique values). See
    :func:`sklearn.inspection.permutation_importance` as an alternative.' and has the following type(s): ndarray of shape (n_features,)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute oob_score_ of sklearn.ensemble.RandomForestClassifier.
    oob_score_ is described as 'Score of the training dataset obtained using an out-of-bag estimate.
    This attribute exists only when ``oob_score`` is True.' and has the following type(s): float

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute oob_decision_function_ of sklearn.ensemble.RandomForestClassifier.
    oob_decision_function_ is described as 'Decision function computed with out-of-bag estimate on the training
    set. If n_estimators is small it might be possible that a data point
    was never left out during the bootstrap. In this case,
    `oob_decision_function_` might contain NaN. This attribute exists
    only when ``oob_score`` is True.' and has the following type(s): ndarray of shape (n_samples, n_classes) or (n_samples, n_classes, n_outputs)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Attribute estimators_samples_ of sklearn.ensemble.RandomForestClassifier.
    estimators_samples_ is described as 'The subset of drawn samples (i.e., the in-bag samples) for each base
    estimator. Each subset is defined by an array of the indices selected.

    .. versionadded:: 1.4' and has the following type(s): list of arrays

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier
    The following functions or classes are related to RandomForestClassifier:
    - sklearn.tree.DecisionTreeClassifier: A decision tree classifier.
    - sklearn.ensemble.ExtraTreesClassifier: Ensemble of extremely randomized
    tree classifiers.
    - sklearn.ensemble.HistGradientBoostingClassifier: A Histogram-based Gradient
    Boosting Classification Tree, very fast for big datasets (n_samples >=
    10_000).


    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier
    Notes: The default values for the parameters controlling the size of the trees
    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and
    unpruned trees which can potentially be very large on some data sets. To
    reduce memory consumption, the complexity and size of the trees should be
    controlled by setting those parameter values.

    The features are always randomly permuted at each split. Therefore,
    the best found split may vary, even with the same training data,
    ``max_features=n_features`` and ``bootstrap=False``, if the improvement
    of the criterion is identical for several splits enumerated during the
    search of the best split. To obtain a deterministic behaviour during
    fitting, ``random_state`` has to be fixed.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier
    Here is a usage example of RandomForestClassifier:
    >>> from sklearn.ensemble import RandomForestClassifier
    >>> from sklearn.datasets import make_classification
    >>> X, y = make_classification(n_samples=1000, n_features=4,
    ...                            n_informative=2, n_redundant=0,
    ...                            random_state=0, shuffle=False)
    >>> clf = RandomForestClassifier(max_depth=2, random_state=0)
    >>> clf.fit(X, y)
    RandomForestClassifier(...)
    >>> print(clf.predict([[0, 0, 0, 0]]))
    [1]

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier
    Here are some references related to RandomForestClassifier:
    .. [1] L. Breiman, "Random Forests", Machine Learning, 45(1), 5-32, 2001.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.apply
    The parameters of apply with their default values when known are: self, X.
    The description of the apply is as follow.
    Apply trees in the forest to X, return leaf indices.


    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.apply.
    X is described as 'The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    X_leaves is returned by sklearn.ensemble.RandomForestClassifier.apply.
    X_leaves is described as 'For each datapoint x in X and for each tree in the forest,
    return the index of the leaf x ends up in.' and has the following type(s): ndarray of shape (n_samples, n_estimators)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.decision_path
    The parameters of decision_path with their default values when known are: self, X.
    The description of the decision_path is as follow.
    Return the decision path in the forest.
    .. versionadded:: 0.18

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.decision_path.
    X is described as 'The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    indicator is returned by sklearn.ensemble.RandomForestClassifier.decision_path.
    indicator is described as 'Return a node indicator matrix where non zero elements indicates
    that the samples goes through the nodes. The matrix is of CSR
    format.' and has the following type(s): sparse matrix of shape (n_samples, n_nodes)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    n_nodes_ptr is returned by sklearn.ensemble.RandomForestClassifier.decision_path.
    n_nodes_ptr is described as 'The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]
    gives the indicator value for the i-th estimator.' and has the following type(s): ndarray of shape (n_estimators + 1,)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.fit
    The parameters of fit with their default values when known are: self, X, y, sample_weight (default=None).
    The description of the fit is as follow.
    Build a forest of trees from the training set (X, y).


    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.fit.
    X is described as 'The training input samples. Internally, its dtype will be converted
    to ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csc_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter y of sklearn.ensemble.RandomForestClassifier.fit.
    y is described as 'The target values (class labels in classification, real numbers in
    regression).' and has the following type(s): array-like of shape (n_samples,) or (n_samples, n_outputs)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter sample_weight of sklearn.ensemble.RandomForestClassifier.fit.
    sample_weight is described as 'Sample weights. If None, then samples are equally weighted. Splits
    that would create child nodes with net zero or negative weight are
    ignored while searching for a split in each node. In the case of
    classification, splits are also ignored if they would result in any
    single class carrying a negative weight in either child node.' and has the following type(s): array-like of shape (n_samples,), default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    self is returned by sklearn.ensemble.RandomForestClassifier.fit.
    self is described as 'Fitted estimator.' and has the following type(s): object

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.get_metadata_routing
    The parameters of get_metadata_routing with their default values when known are: self.
    The description of the get_metadata_routing is as follow.
    Get metadata routing of this object.
    Please check :ref:`User Guide <metadata_routing>` on how the routing mechanism works.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    routing is returned by sklearn.ensemble.RandomForestClassifier.get_metadata_routing.
    routing is described as 'A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating
    routing information.' and has the following type(s): MetadataRequest

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.get_params
    The parameters of get_params with their default values when known are: self, deep (default=True).
    The description of the get_params is as follow.
    Get parameters for this estimator.


    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter deep of sklearn.ensemble.RandomForestClassifier.get_params.
    deep is described as 'If True, will return the parameters for this estimator and
    contained subobjects that are estimators.' and has the following type(s): bool, default=True

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    params is returned by sklearn.ensemble.RandomForestClassifier.get_params.
    params is described as 'Parameter names mapped to their values.' and has the following type(s): dict

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.predict
    The parameters of predict with their default values when known are: self, X.
    The description of the predict is as follow.
    Predict class for X.
    The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.predict.
    X is described as 'The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    y is returned by sklearn.ensemble.RandomForestClassifier.predict.
    y is described as 'The predicted classes.' and has the following type(s): ndarray of shape (n_samples,) or (n_samples, n_outputs)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.predict_log_proba
    The parameters of predict_log_proba with their default values when known are: self, X.
    The description of the predict_log_proba is as follow.
    Predict class log-probabilities for X.
    The predicted class log-probabilities of an input sample is computed as the log of the mean predicted class probabilities of the trees in the forest.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.predict_log_proba.
    X is described as 'The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    p is returned by sklearn.ensemble.RandomForestClassifier.predict_log_proba.
    p is described as 'The class probabilities of the input samples. The order of the
    classes corresponds to that in the attribute :term:`classes_`.' and has the following type(s): ndarray of shape (n_samples, n_classes), or a list of such arrays

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.predict_proba
    The parameters of predict_proba with their default values when known are: self, X.
    The description of the predict_proba is as follow.
    Predict class probabilities for X.
    The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest. The class probability of a single tree is the fraction of samples of the same class in a leaf.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.predict_proba.
    X is described as 'The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.' and has the following type(s): {array-like, sparse matrix} of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    p is returned by sklearn.ensemble.RandomForestClassifier.predict_proba.
    p is described as 'The class probabilities of the input samples. The order of the
    classes corresponds to that in the attribute :term:`classes_`.' and has the following type(s): ndarray of shape (n_samples, n_classes), or a list of such arrays

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.score
    The parameters of score with their default values when known are: self, X, y, sample_weight (default=None).
    The description of the score is as follow.
    Return the mean accuracy on the given test data and labels.
    In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter X of sklearn.ensemble.RandomForestClassifier.score.
    X is described as 'Test samples.' and has the following type(s): array-like of shape (n_samples, n_features)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter y of sklearn.ensemble.RandomForestClassifier.score.
    y is described as 'True labels for `X`.' and has the following type(s): array-like of shape (n_samples,) or (n_samples, n_outputs)

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter sample_weight of sklearn.ensemble.RandomForestClassifier.score.
    sample_weight is described as 'Sample weights.' and has the following type(s): array-like of shape (n_samples,), default=None

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    score is returned by sklearn.ensemble.RandomForestClassifier.score.
    score is described as 'Mean accuracy of ``self.predict(X)`` w.r.t. `y`.' and has the following type(s): float

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.set_fit_request
    The parameters of set_fit_request with their default values when known are: self, sample_weight (default=$UNCHANGED$).
    The description of the set_fit_request is as follow.
    Request metadata passed to the ``fit`` method.
    Note that this method is only relevant if ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`). Please see :ref:`User Guide <metadata_routing>` on how the routing mechanism works.
    The options for each parameter are:
    - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.
    - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.
    - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.
    - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.
    The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the existing request. This allows you to change the request for some parameters and not others.
    .. versionadded:: 1.3
    .. note:: This method is only relevant if this estimator is used as a sub-estimator of a meta-estimator, e.g. used inside a :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter sample_weight of sklearn.ensemble.RandomForestClassifier.set_fit_request.
    sample_weight is described as 'Metadata routing for ``sample_weight`` parameter in ``fit``.' and has the following type(s): str, True, False, or None, default=sklearn.utils.metadata_routing.UNCHANGED

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    self is returned by sklearn.ensemble.RandomForestClassifier.set_fit_request.
    self is described as 'The updated object.' and has the following type(s): object

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.set_params
    The parameters of set_params with their default values when known are: self, params.
    The description of the set_params is as follow.
    Set the parameters of this estimator.
    The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter **params of sklearn.ensemble.RandomForestClassifier.set_params.
    **params is described as 'Estimator parameters.' and has the following type(s): dict

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    self is returned by sklearn.ensemble.RandomForestClassifier.set_params.
    self is described as 'Estimator instance.' and has the following type(s): estimator instance

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    sklearn.ensemble.RandomForestClassifier.set_score_request
    The parameters of set_score_request with their default values when known are: self, sample_weight (default=$UNCHANGED$).
    The description of the set_score_request is as follow.
    Request metadata passed to the ``score`` method.
    Note that this method is only relevant if ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`). Please see :ref:`User Guide <metadata_routing>` on how the routing mechanism works.
    The options for each parameter are:
    - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.
    - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.
    - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.
    - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.
    The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the existing request. This allows you to change the request for some parameters and not others.
    .. versionadded:: 1.3
    .. note:: This method is only relevant if this estimator is used as a sub-estimator of a meta-estimator, e.g. used inside a :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    Parameter sample_weight of sklearn.ensemble.RandomForestClassifier.set_score_request.
    sample_weight is described as 'Metadata routing for ``sample_weight`` parameter in ``score``.' and has the following type(s): str, True, False, or None, default=sklearn.utils.metadata_routing.UNCHANGED

    The source of the chunk is https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html

    self is returned by sklearn.ensemble.RandomForestClassifier.set_score_request.
    self is described as 'The updated object.' and has the following type(s): object





.. GENERATED FROM PYTHON SOURCE LINES 35-36

.. code-block:: Python

    print("hello world")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    hello world





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.081 seconds)


.. _sphx_glr_download_auto_examples_plot_documentation_scraping.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_documentation_scraping.ipynb <plot_documentation_scraping.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_documentation_scraping.py <plot_documentation_scraping.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
